# -*- coding: utf-8 -*-
"""tflite_helmet_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJ1Qq0PPac785zZh2KSvZRo7z-NiFtaw
"""

from google.colab import drive
drive.mount('/content/gdrive')

!ln -s /content/gdrive/My\ Drive/ /mydrive

# Commented out IPython magic to ensure Python compatibility.
# %cd /mydrive/yolov4_tiny_helmet1

# !git clone https://github.com/AlexeyAB/darknet

import glob
import os
import numpy as np
import sys

current_dir = "/mydrive//yolov4_tiny_helmet1//darknet//data//ts/"
split_pct = 10;
file_train = open("darknet/data/train.txt", "w")  
file_val = open("darknet/data/test.txt", "w")  
counter = 1  
index_test = round(100 / split_pct)  
for pathAndFilename in glob.iglob(os.path.join(current_dir, "*.jpg")):  
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        if counter == index_test:
                counter = 1
                file_val.write(current_dir + "/" + title + '.jpg' + "\n")
        else:
                file_train.write(current_dir + "/" + title + '.jpg' + "\n")
                counter = counter + 1
file_train.close()
file_val.close()

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import glob
import os

def read_label(image_path):
  file_name = image_path.replace('.jpg', '.txt')
  with open(file_name, 'rt') as file:
    print(os.path.basename(file_name) + ': \n' + file.read())

image_path = glob.glob("darknet/data/ts/*.jpg")
fig = plt.figure(figsize=(12,8))
cols = 2
rows = 2
grid = gridspec.GridSpec(nrows=rows, ncols=cols, figure=fig)
for i in range(cols*rows):
  fig.add_subplot(grid[i])
  image=plt.imread(image_path[i])
  plt.title(os.path.basename(image_path[i]))
  plt.axis(False)
  plt.imshow(image)
  read_label(image_path[i])

plt.savefig("dataset_examples.jpg", dpi=300)

pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd darknet/data/
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v4_pre/yolov4-tiny.weights

# Commented out IPython magic to ensure Python compatibility.
# %cd ..

!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile

!make

!chmod +x ./darknet

!./darknet detector train data/obj.data cfg/yolov4-tiny-custom.cfg data/yolov4-tiny.weights -dont_show

img_path = "data/test.jpg"
!./darknet detector test data/obj.data cfg/yolov4-tiny-custom_test.cfg data/yolov4-tiny-custom_final.weights {img_path} -thresh 0.3 -dont_show

img_path = "data/test.jpg"
!./darknet detector test data/obj.data cfg/yolov4-tiny-custom_test.cfg data/yolov4-tiny-custom_final.weights -thresh 0.3 -points 0

# Commented out IPython magic to ensure Python compatibility.
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()
imShow('chart.png')

!./darknet detector map data/obj.data cfg/yolov4-tiny-custom.cfg /mydrive/yolov4_tiny_helmet1/darknet/data/yolov4-tiny-custom_final.weights -points 0

import matplotlib.pyplot as plt 
fig = plt.figure(figsize=(12,12))
plt.axis(False)
processed_image = plt.imread("./predictions.jpg")
plt.imshow(processed_image)

pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1
!git clone https://github.com/hunglc007/tensorflow-yolov4-tflite.git
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite

!cp /content/gdrive/MyDrive/yolov4_tiny_helmet1/darknet/data/obj.names /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite/data/classes/
!ls /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite/data/classes/

!sed -i "s/coco.names/obj.names/g" /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite/core/config.py

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite
# Regular TensorFlow SavedModel
!python save_model.py \
  --weights /content/gdrive/MyDrive/yolov4_tiny_helmet1/darknet/backup/yolov4-tiny-custom_final.weights \
  --output ./checkpoints/yolov4-tiny-416 \
  --input_size 416 \
  --model yolov4 \
  --tiny \

# SavedModel to convert to TFLite
!python save_model.py \
  --weights /content/gdrive/MyDrive/yolov4_tiny_helmet1/darknet/backup/yolov4-tiny-custom_final.weights \
  --output ./checkpoints/yolov4-tiny-pretflite-416 \
  --input_size 416 \
  --model yolov4 \
  --tiny \
  --framework tflite



# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite
# Regular TensorFlow SavedModel
!python save_model.py \
  --weights /content/gdrive/MyDrive/yolov4_tiny_helmet1/darknet/backup/yolov4-tiny-custom_final.weights \
  --output ./checkpoints/yolov4-tiny-416 \
  --input_size 416 \
  --model yolov4 \
  --tiny \

# SavedModel to convert to TFLite
!python save_model.py \
  --weights /content/gdrive/MyDrive/yolov4_tiny_helmet1/darknet/backup/yolov4-tiny-custom_final.weights \
  --output ./checkpoints/yolov4-tiny-pretflite-416 \
  --input_size 416 \
  --model yolov4 \
  --tiny \
  --framework tflite

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite
!python convert_tflite.py --weights ./checkpoints/yolov4-tiny-pretflite-416 --output ./checkpoints/yolov4-tiny-416.tflite

!/usr/local/cuda/bin/nvcc --version

!nvidia-smi

# Commented out IPython magic to ensure Python compatibility.
# %env compute_capability=75

!pip install tensorflow==2.3.0

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/yolov4_tiny_helmet1/tensorflow-yolov4-tflite
!python convert_tflite.py --weights ./checkpoints/yolov4-tiny-pretflite-416 --output ./checkpoints/yolov4-tiny-416.tflite

